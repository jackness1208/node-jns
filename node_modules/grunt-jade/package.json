{
  "name": "grunt-jade",
  "description": "Compile jade templates with grunt.",
  "version": "0.5.1",
  "homepage": "https://github.com/phated/grunt-jade",
  "author": {
    "name": "Blaine Bublitz",
    "email": "blaine@iceddev.com",
    "url": "iceddev.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/phated/grunt-jade.git"
  },
  "bugs": {
    "url": "https://github.com/phated/grunt-jade/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/phated/grunt-jade/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "bin": {
    "grunt-jade": "bin/grunt-jade"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "jade": "~0.28.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-cli": "~0.1.13",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-nodeunit": "~0.4.1",
    "grunt-contrib-watch": "~0.6.1"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-jade [![build status](https://secure.travis-ci.org/phated/grunt-jade.png)](http://travis-ci.org/phated/grunt-jade)\n\nCompile jade templates with grunt.\n\n## Notices\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you are looking for the version of this that works in Grunt `~0.3.0`, use version `0.3.9`\n\n## Getting Started\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-jade`\n\nThen add this line to your project's `grunt.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-jade');\n```\n\n[grunt]: https://github.com/cowboy/grunt\n[getting_started]: https://github.com/cowboy/grunt/blob/master/docs/getting_started.md\n\n## Documentation\nTo your [grunt.js gruntfile][getting_started], add:\n\n```javascript\njade: {\n  no_options: {\n    files: {\n      'dest/path/': ['path/to/src/*.jade']\n    }\n  }\n}\n```\n\nFor AMD compilation, add:\n(`dependencies` is what you want the runtime to be named)\n\n```javascript\njade: {\n  amd: {\n    files: {\n      'dest/path/': ['path/to/src/*.jade']\n    },\n    options: {\n      wrap: 'amd'\n    }\n  }\n}\n```\n\nFor node-style (Modules/1.0) compilation, add:\n(`dependencies` is what you want the runtime to be named)\n\n```javascript\njade: {\n  node: {\n    files: {\n      'dest/path/': ['path/to/src/*.jade']\n    },\n    options: {\n      wrap: 'node'\n    }\n  }\n}\n```\n\nFor pretty-indentation whitespace, add\n\n```javascript\njade: {\n  pretty: {\n    files: {\n      'dest/path/': ['path/to/src/*.jade']\n    },\n    options: {\n      pretty: true\n    }\n  }\n}\n```\n\nFor debug compilation, add:\n\n```javascript\njade: {\n  debug: {\n    files: {\n      'dest/path/': ['path/to/src/*.jade']\n    },\n    options: {\n      compileDebug: true\n    }\n  }\n}\n```\n\nFor HTML compilation (instead of JS), add:\n\n```javascript\njade: {\n  html: {\n    files: {\n      'dest/path/': ['path/to/src/*.jade']\n    },\n    options: {\n      client: false\n    }\n  }\n}\n```\n\nFor unwrapped functions, add:\n\n```javascript\njade: {\n  unwrapped: {\n    files: {\n      'dest/path/': ['path/to/src/*.jade']\n    },\n    options: {\n      wrap: false // or 'none'\n    }\n  }\n}\n```\n\nTo keep directory structure, use basePath:\n\n```javascript\njade: {\n  base_path: {\n    files: {\n      'dest/path/': ['path/to/src/*.jade'],\n    },\n    options: {\n      basePath: 'path/to/'\n    }\n  }\n}\n```\n\nFor no runtime file, add:\n\n```javascript\njade: {\n  no_runtime: {\n    files: {\n      'dest/path/': ['path/to/src/*.jade']\n    },\n    options: {\n      runtime: false\n    }\n  }\n}\n```\n\nFor locals, add:\n\n```javascript\njade: {\n  locals: {\n    files: {\n      'dest/path/': ['path/to/src/*.jade']\n    },\n    options: {\n      client: false,\n      locals: {\n        title: 'Welcome to my website!'\n      }\n    }\n  }\n}\n```\n\nOr alternatively, use a function:\n\n```javascript\njade: {\n  locals: {\n    files: {\n      'dest/path/': ['path/to/src/*.jade']\n    },\n    options: {\n      client: false,\n      locals: function() {\n          return {compiledAt: new Date()};\n      }\n    }\n  }\n}\n```\nThis is useful when you are also using the watch task, since the function will\nbe called on each reload.\n\nFor custom extension, add:\n\n```javascript\njade: {\n  custom_extension: {\n    files: {\n      'dest/path/': ['path/to/src/*.jade']\n    },\n    options: {\n      extension: '.xml',\n    }\n  }\n}\n```\n\n## Defaults\n\n__Options Defaults__\n\n```javascript\noptions: {\n  client: true,\n  runtime: true,\n  pretty: false,\n  compileDebug: false,\n  extension: null,\n  wrap: null,\n  locals: null,\n  basePath: null\n}\n```\n\n__Wrap Defaults__\n\n```javascript\nwrap: {\n  wrap: true,\n  amd: false,\n  node: false,\n  dependencies: null\n}\n```\n\n__Wrap Shorthand__\n\nStrings can be passed to `options.wrap` as a quick config\n\n```javascript\nwrap: 'amd'\n// Shorthand for:\n// wrap: {\n//   wrap: true,\n//   amd: true,\n//   node: false,\n//   dependencies: 'runtime'\n// }\n\nwrap: 'global'\n// Shorthand for: default wrapper\n// wrap: {\n//   wrap: true,\n//   amd: false,\n//   node: false,\n//   dependencies: null\n// }\n\nwrap: 'node'\n// Shorthand for:\n// wrap: {\n//   wrap: true,\n//   amd: false,\n//   node: true,\n//   dependencies: './runtime'\n// }\n\nwrap: 'none'\n// Shorthand for:\n// wrap: {\n//   wrap: false,\n//   amd: false,\n//   node: false,\n//   dependencies: null\n// }\n```\n\nBooleans can be passed to `options.wrap` as a quick config, too\n\n```javascript\nwrap: true\n// Shorthand for: 'global' or default wrapper\n// wrap: {\n//   wrap: true,\n//   amd: false,\n//   node: false,\n//   dependencies: null\n// }\n\nwrap: false\n// Shorthand for: 'none'\n// wrap: {\n//   wrap: false,\n//   amd: false,\n//   node: false,\n//   dependencies: null\n// }\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt][grunt].\n\n## Release History\n_(Nothing yet)_\n\n## License\nCopyright (c) 2013 Blaine Bublitz\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-jade@0.5.1",
  "_from": "grunt-jade@^0.5.1"
}
